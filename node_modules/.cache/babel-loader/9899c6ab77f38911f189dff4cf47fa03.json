{"ast":null,"code":"import { takeLatest, put, call, all } from \"@redux-saga/core/effects\";\nimport { CREATEPRODUCT, DELETEPRODUCT, GETPRODUCTS, GETPRODWITHID, SETPRODUCTS, UPDATEPRODUCT } from \"../actionTypes/product\";\nimport { productApi } from \"../services/product\";\n/* Worker */\n\nfunction* createProd(action) {\n  try {\n    const {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount\n    } = action.payload;\n    const data = yield call(productApi.createProduct, {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* deleteProd(action) {\n  try {\n    const {\n      id\n    } = action.payload;\n    const data = yield call(productApi.deleteProducts, {\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getProds(action) {\n  try {\n    const data = yield call(productApi.getProducts);\n    const arrProd = data.data.map(_ref => {\n      let {\n        name,\n        manufacturer,\n        calories,\n        rating,\n        description,\n        category,\n        amount\n      } = _ref;\n      return {\n        name,\n        manufacturer,\n        calories,\n        rating,\n        description,\n        category,\n        amount\n      };\n    });\n\n    if (data.status === 200) {\n      yield put({\n        type: SETPRODUCTS,\n        data: arrProd\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getProd(action) {\n  try {\n    const {\n      id\n    } = action.payload;\n    const data = yield call(productApi.getProductWithId, {\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* updateProd(action) {\n  try {\n    const {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount,\n      id\n    } = action.payload;\n    const data = yield call(productApi.updateProduct, {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount,\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n/* Watcher */\n\n\nfunction* watchCreateProductSaga() {\n  yield takeLatest(CREATEPRODUCT, createProd);\n}\n\nfunction* watchDeleteProductSaga() {\n  yield takeLatest(DELETEPRODUCT, deleteProd);\n}\n\nfunction* watchGetProductsSaga() {\n  yield takeLatest(GETPRODUCTS, getProds);\n}\n\nfunction* watchGetProductWithIdSaga() {\n  yield takeLatest(GETPRODWITHID, getProd);\n}\n\nfunction* watchUpdateProductSaga() {\n  yield takeLatest(UPDATEPRODUCT, updateProd);\n}\n\nexport default function* productSaga() {\n  yield all([watchCreateProductSaga(), watchDeleteProductSaga(), watchGetProductsSaga(), watchGetProductWithIdSaga(), watchUpdateProductSaga()]);\n}","map":{"version":3,"sources":["/home/dev/Max/test/login/src/store/sagas/product.js"],"names":["takeLatest","put","call","all","CREATEPRODUCT","DELETEPRODUCT","GETPRODUCTS","GETPRODWITHID","SETPRODUCTS","UPDATEPRODUCT","productApi","createProd","action","name","manufacturer","calories","rating","description","category","amount","payload","data","createProduct","error","console","log","deleteProd","id","deleteProducts","getProds","getProducts","arrProd","map","status","type","getProd","getProductWithId","updateProd","updateProduct","watchCreateProductSaga","watchDeleteProductSaga","watchGetProductsSaga","watchGetProductWithIdSaga","watchUpdateProductSaga","productSaga"],"mappings":"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","sourcesContent":["import { takeLatest,put,call,all} from \"@redux-saga/core/effects\";\nimport { CREATEPRODUCT, DELETEPRODUCT, GETPRODUCTS, GETPRODWITHID, SETPRODUCTS, UPDATEPRODUCT } from \"../actionTypes/product\";\nimport { productApi } from \"../services/product\";\n\n\n/* Worker */\n\nfunction* createProd(action){\n  try{\n    const {name,manufacturer,calories,rating,description,category,amount} = action.payload\n    const data = yield call(productApi.createProduct,{name,manufacturer,calories,rating,description,category,amount})\n  }\n  catch(error){\n    console.log(error)\n  }\n\n}\n\n\nfunction* deleteProd(action){\n  try{\n    const {id} = action.payload\n    const data = yield call(productApi.deleteProducts,{id})\n  }\n  catch(error){\n    console.log(error)\n  }\n\n}\n\n\nfunction* getProds(action){\n  try{\n      const data = yield call(productApi.getProducts)\n      const arrProd = data.data.map(({name,manufacturer,calories,rating,description,category,amount})=>{\n        return{name,manufacturer,calories,rating,description,category,amount}\n      })\n      if(data.status === 200){\n        yield put({type:SETPRODUCTS,data:arrProd})\n      }\n  }\n  catch(error){\n    console.log(error)\n  }\n  \n}\n\nfunction* getProd(action){\n  try{\n    const {id} =action.payload\n    const data = yield call(productApi.getProductWithId,{id})\n  }\n  catch(error){\n    console.log(error)\n  }\n\n}\n\nfunction* updateProd(action){\n  try{\n    const {name,manufacturer,calories,rating,description,category,amount,id} = action.payload\n    const data = yield call(productApi.updateProduct,{name,manufacturer,calories,rating,description,category,amount,id})\n  }\n  catch(error){\n    console.log(error)\n  }\n\n}\n\n/* Watcher */\n\n\nfunction* watchCreateProductSaga(){\n  yield  takeLatest(CREATEPRODUCT,createProd)\n}\n\nfunction* watchDeleteProductSaga(){\n  yield takeLatest(DELETEPRODUCT,deleteProd)\n}\n\nfunction* watchGetProductsSaga(){\n  yield takeLatest(GETPRODUCTS,getProds)\n}\n\nfunction* watchGetProductWithIdSaga(){\n  yield takeLatest(GETPRODWITHID,getProd)\n}\n\nfunction* watchUpdateProductSaga(){\n  yield takeLatest(UPDATEPRODUCT,updateProd)\n}\n\nexport default function* productSaga(){\n  yield all([\n    watchCreateProductSaga(),\n    watchDeleteProductSaga(),\n    watchGetProductsSaga(),\n    watchGetProductWithIdSaga(),\n    watchUpdateProductSaga()\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}