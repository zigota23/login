{"ast":null,"code":"import { takeLatest, put, call, all, takeEvery, spawn } from \"@redux-saga/core/effects\";\nimport { DELETEUSER, GETUSER, LOGIN, LOGOUT, RENEWTOKEN, SETDATAUSER, SIGNUP, USERUPDATE } from \"../actionTypes/user\";\nimport { userApi } from \"../services/user\";\n/* Worker */\n\nfunction* userDelete(action) {\n  const {\n    token\n  } = action.payload;\n  const data = yield call(userApi.userDelete, {\n    token\n  });\n\n  if (data.status === 200) {\n    yield put({\n      type: SETDATAUSER,\n      data: {\n        token: '',\n        firstName: '',\n        lastName: '',\n        email: ''\n      }\n    });\n  }\n}\n\nfunction* getUser() {\n  const data = yield call(userApi.getMe());\n}\n\nfunction* loginUser(action) {\n  console.log(action);\n  const {\n    email,\n    password\n  } = action.payload;\n  const data = yield call(userApi.login, {\n    email,\n    password\n  });\n\n  if (data.status === 200) {\n    yield put({\n      type: SETDATAUSER,\n      data: {\n        token: data.data.user.accessToken,\n        firstName: data.data.user.firstName,\n        lastName: data.data.user.lastName,\n        email: data.data.user.email\n      }\n    });\n  }\n}\n\nfunction* logoutUser(action) {\n  const {\n    token\n  } = action.payload;\n  const data = yield call(userApi.logout, {\n    token\n  });\n\n  if (data.status === 200) {\n    yield put({\n      type: SETDATAUSER,\n      data: {\n        token: '',\n        firstName: '',\n        lastName: ''\n      }\n    });\n  }\n}\n\nfunction* renewToken(action) {\n  const {\n    token\n  } = action.payload;\n  const data = yield call(userApi.renewToken, {\n    token\n  });\n}\n\nfunction* singUpUser(action) {\n  const {\n    firstName,\n    lastName,\n    email,\n    password\n  } = action.payload;\n  const data = yield call(userApi.signup, {\n    firstName,\n    lastName,\n    email,\n    password\n  });\n\n  if (data.status === 201) {\n    yield put({\n      type: SETDATAUSER,\n      data: {\n        token: data.data.user.accessToken,\n        firstName: data.data.user.firstName,\n        lastName: data.data.user.lastName,\n        email: data.data.user.email\n      }\n    });\n  }\n}\n\nfunction* userUpdate(action) {\n  const {\n    firstName,\n    lastName,\n    email,\n    token\n  } = action.payload;\n  const data = yield call(userApi.userUpdate, {\n    firstName,\n    lastName,\n    email,\n    token\n  });\n\n  if (data.status === 200) {\n    yield put({\n      type: SETDATAUSER,\n      data: {\n        firstName: data.data.updatedUser.firstName,\n        lastName: data.data.updatedUser.lastName,\n        email: data.data.updatedUser.email\n      }\n    });\n  }\n}\n/* Watchers */\n\n\nfunction* watchDeleteUserSaga() {\n  yield takeLatest(DELETEUSER, userDelete);\n}\n\nfunction* watchGetUserSaga() {\n  yield takeLatest(GETUSER, getUser);\n}\n\nfunction* watchUpdateUserSaga() {\n  yield takeLatest(USERUPDATE, userUpdate);\n}\n\nfunction* watchSignUpSaga() {\n  yield takeLatest(SIGNUP, singUpUser);\n}\n\nfunction* watchRenewTokenSaga() {\n  yield takeLatest(RENEWTOKEN, renewToken);\n}\n\nfunction* watchLogoutSaga() {\n  yield takeLatest(LOGOUT, logoutUser);\n}\n\nfunction* watchLoginSaga() {\n  yield takeLatest(LOGIN, loginUser);\n}\n\nexport default function* userSaga() {\n  yield all([spawn(watchDeleteUserSaga), spawn(watchGetUserSaga), spawn(watchUpdateUserSaga), spawn(watchSignUpSaga), spawn(watchRenewTokenSaga), spawn(watchLogoutSaga), spawn(watchLoginSaga)]);\n}","map":{"version":3,"sources":["/home/dev/Max/test/login/src/store/sagas/user.js"],"names":["takeLatest","put","call","all","takeEvery","spawn","DELETEUSER","GETUSER","LOGIN","LOGOUT","RENEWTOKEN","SETDATAUSER","SIGNUP","USERUPDATE","userApi","userDelete","action","token","payload","data","status","type","firstName","lastName","email","getUser","getMe","loginUser","console","log","password","login","user","accessToken","logoutUser","logout","renewToken","singUpUser","signup","userUpdate","updatedUser","watchDeleteUserSaga","watchGetUserSaga","watchUpdateUserSaga","watchSignUpSaga","watchRenewTokenSaga","watchLogoutSaga","watchLoginSaga","userSaga"],"mappings":"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","sourcesContent":["import { takeLatest,put,call,all,takeEvery,spawn } from \"@redux-saga/core/effects\"\nimport { DELETEUSER, GETUSER, LOGIN, LOGOUT, RENEWTOKEN, SETDATAUSER, SIGNUP, USERUPDATE } from \"../actionTypes/user\"\nimport { userApi } from \"../services/user\"\n\n\n/* Worker */\n\nfunction* userDelete(action){\n  const {token} = action.payload\n  const data = yield call(userApi.userDelete,{token})\n  if(data.status === 200){\n    yield put({type:SETDATAUSER,data:{token:'',firstName:'',lastName:'',email:''}})\n  }\n}\n\nfunction* getUser(){\n  const data = yield call(userApi.getMe())\n}\n\n\nfunction* loginUser(action){\n  console.log(action)\n  const {email,password} = action.payload\n  const data = yield call(userApi.login,{email,password})\n  if(data.status === 200){\n    yield put({type:SETDATAUSER,data:{token:data.data.user.accessToken,firstName:data.data.user.firstName,lastName:data.data.user.lastName,email:data.data.user.email}})\n  }\n}\n\n\nfunction* logoutUser(action){\n  const {token} = action.payload\n  const data = yield call(userApi.logout,{token})\n  if(data.status === 200){\n    yield put({type:SETDATAUSER,data:{token:'',firstName:'',lastName:''}})\n  }\n}\n\nfunction* renewToken(action){\n  const {token} = action.payload\n  const data = yield call(userApi.renewToken,{token})\n}\n\n\nfunction* singUpUser(action){\n  const {firstName,lastName,email,password} = action.payload\n  const data = yield call(userApi.signup,{firstName,lastName,email,password})\n  if(data.status === 201){\n    yield put({type:SETDATAUSER,data:{token:data.data.user.accessToken,firstName:data.data.user.firstName,lastName:data.data.user.lastName,email:data.data.user.email}})\n  }\n} \n\n\nfunction* userUpdate(action){\n  const {firstName,lastName,email,token} =action.payload\n  const data = yield call(userApi.userUpdate,{firstName,lastName,email,token})\n  if(data.status === 200){\n    yield put({type:SETDATAUSER,data:{firstName:data.data.updatedUser.firstName,lastName:data.data.updatedUser.lastName,email:data.data.updatedUser.email}})\n  }\n}\n\n\n\n/* Watchers */\n\nfunction* watchDeleteUserSaga(){\n  yield takeLatest(DELETEUSER,userDelete)\n}\n\nfunction* watchGetUserSaga(){\n  yield takeLatest(GETUSER,getUser)\n}\n\nfunction* watchUpdateUserSaga(){\n  yield takeLatest(USERUPDATE,userUpdate)\n}\n\nfunction* watchSignUpSaga(){\n  yield takeLatest(SIGNUP,singUpUser)\n}\nfunction* watchRenewTokenSaga(){\n  yield takeLatest(RENEWTOKEN,renewToken)\n}\n\nfunction* watchLogoutSaga(){\n  yield takeLatest(LOGOUT,logoutUser)\n}\n\nfunction* watchLoginSaga(){\n  \n  yield takeLatest(LOGIN,loginUser)\n}\n\nexport default function* userSaga(){\n  yield all([\n    spawn(watchDeleteUserSaga),\n    spawn(watchGetUserSaga),\n    spawn(watchUpdateUserSaga),\n    spawn(watchSignUpSaga),\n    spawn(watchRenewTokenSaga),\n    spawn(watchLogoutSaga),\n    spawn(watchLoginSaga)\n  ])\n}"]},"metadata":{},"sourceType":"module"}