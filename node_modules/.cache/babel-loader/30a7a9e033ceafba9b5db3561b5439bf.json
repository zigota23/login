{"ast":null,"code":"import { takeLatest, put, call, all } from \"@redux-saga/core/effects\";\nimport { CREATEPRODUCT, DELETEPRODUCT, GETPRODUCTS, GETPRODWITHID, SETPRODUCTS, UPDATEPRODUCT } from \"../actionTypes/product\";\nimport { productApi } from \"../services/product\";\n/* Worker */\n\nfunction* createProd(action) {\n  try {\n    const {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount,\n      token\n    } = action.payload;\n    const data = yield call(productApi.createProduct, {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount,\n      token\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* deleteProd(action) {\n  try {\n    const {\n      id,\n      token\n    } = action.payload;\n    const data = yield call(productApi.deleteProducts, {\n      id,\n      token\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getProds(action) {\n  try {\n    const {\n      token\n    } = action.payload;\n    const data = yield call(productApi.getProducts, {\n      token\n    });\n    const arrProd = data.data.map(_ref => {\n      let {\n        name,\n        manufacturer,\n        calories,\n        rating,\n        description,\n        category,\n        amount\n      } = _ref;\n      return {\n        name,\n        manufacturer,\n        calories,\n        rating,\n        description,\n        category,\n        amount\n      };\n    });\n\n    if (data.status === 200) {\n      yield put({\n        type: SETPRODUCTS,\n        data: arrProd\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getProd(action) {\n  try {\n    const {\n      id,\n      token\n    } = action.payload;\n    const data = yield call(productApi.getProductWithId, {\n      id,\n      token\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* updateProd(action) {\n  try {\n    const {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount,\n      id\n    } = action.payload;\n    const data = yield call(productApi.updateProduct, {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount,\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n/* Watcher */\n\n\nfunction* watchCreateProductSaga() {\n  yield takeLatest(CREATEPRODUCT, createProd);\n}\n\nfunction* watchDeleteProductSaga() {\n  yield takeLatest(DELETEPRODUCT, deleteProd);\n}\n\nfunction* watchGetProductsSaga() {\n  yield takeLatest(GETPRODUCTS, getProds);\n}\n\nfunction* watchGetProductWithIdSaga() {\n  yield takeLatest(GETPRODWITHID, getProd);\n}\n\nfunction* watchUpdateProductSaga() {\n  yield takeLatest(UPDATEPRODUCT, updateProd);\n}\n\nexport default function* productSaga() {\n  yield all([watchCreateProductSaga(), watchDeleteProductSaga(), watchGetProductsSaga(), watchGetProductWithIdSaga(), watchUpdateProductSaga()]);\n}","map":{"version":3,"sources":["/home/dev/Max/test/login/src/store/sagas/product.js"],"names":["takeLatest","put","call","all","CREATEPRODUCT","DELETEPRODUCT","GETPRODUCTS","GETPRODWITHID","SETPRODUCTS","UPDATEPRODUCT","productApi","createProd","action","name","manufacturer","calories","rating","description","category","amount","token","payload","data","createProduct","error","console","log","deleteProd","id","deleteProducts","getProds","getProducts","arrProd","map","status","type","getProd","getProductWithId","updateProd","updateProduct","watchCreateProductSaga","watchDeleteProductSaga","watchGetProductsSaga","watchGetProductWithIdSaga","watchUpdateProductSaga","productSaga"],"mappings":"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","sourcesContent":["import { takeLatest,put,call,all} from \"@redux-saga/core/effects\";\nimport { CREATEPRODUCT, DELETEPRODUCT, GETPRODUCTS, GETPRODWITHID, SETPRODUCTS, UPDATEPRODUCT } from \"../actionTypes/product\";\nimport { productApi } from \"../services/product\";\n\n\n/* Worker */\n\nfunction* createProd(action){\n  try{\n    const {name,manufacturer,calories,rating,description,category,amount,token} = action.payload\n    const data = yield call(productApi.createProduct,{name,manufacturer,calories,rating,description,category,amount,token})\n  }\n  catch(error){\n    console.log(error)\n  }\n\n}\n\n\nfunction* deleteProd(action){\n  try{\n    const {id,token} = action.payload\n    const data = yield call(productApi.deleteProducts,{id,token})\n  }\n  catch(error){\n    console.log(error)\n  }\n\n}\n\n\nfunction* getProds(action){\n  try{\n    const {token} = action.payload\n      const data = yield call(productApi.getProducts,{token})\n      const arrProd = data.data.map(({name,manufacturer,calories,rating,description,category,amount})=>{\n        return{name,manufacturer,calories,rating,description,category,amount}\n      })\n      if(data.status === 200){\n        yield put({type:SETPRODUCTS,data:arrProd})\n      }\n  }\n  catch(error){\n    console.log(error)\n  }\n  \n}\n\nfunction* getProd(action){\n  try{\n    const {id,token} =action.payload\n    const data = yield call(productApi.getProductWithId,{id,token})\n  }\n  catch(error){\n    console.log(error)\n  }\n\n}\n\nfunction* updateProd(action){\n  try{\n    const {name,manufacturer,calories,rating,description,category,amount,id} = action.payload\n    const data = yield call(productApi.updateProduct,{name,manufacturer,calories,rating,description,category,amount,id})\n  }\n  catch(error){\n    console.log(error)\n  }\n\n}\n\n/* Watcher */\n\n\nfunction* watchCreateProductSaga(){\n  yield  takeLatest(CREATEPRODUCT,createProd)\n}\n\nfunction* watchDeleteProductSaga(){\n  yield takeLatest(DELETEPRODUCT,deleteProd)\n}\n\nfunction* watchGetProductsSaga(){\n  yield takeLatest(GETPRODUCTS,getProds)\n}\n\nfunction* watchGetProductWithIdSaga(){\n  yield takeLatest(GETPRODWITHID,getProd)\n}\n\nfunction* watchUpdateProductSaga(){\n  yield takeLatest(UPDATEPRODUCT,updateProd)\n}\n\nexport default function* productSaga(){\n  yield all([\n    watchCreateProductSaga(),\n    watchDeleteProductSaga(),\n    watchGetProductsSaga(),\n    watchGetProductWithIdSaga(),\n    watchUpdateProductSaga()\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}