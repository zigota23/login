{"ast":null,"code":"import { takeLatest, put, call, all } from \"@redux-saga/core/effects\";\nimport { CREATEPRODUCT, DELETEPRODUCT, GETPRODUCTS, GETPRODWITHID, SETPRODUCTS, UPDATEPRODUCT } from \"../actionTypes/product\";\nimport { productApi } from \"../services/product\";\n/* Worker */\n\nfunction* createProd(action) {\n  const {\n    name,\n    manufacturer,\n    calories,\n    rating,\n    description,\n    category,\n    amount,\n    token\n  } = action.payload;\n  const data = yield call(productApi.createProduct, {\n    name,\n    manufacturer,\n    calories,\n    rating,\n    description,\n    category,\n    amount,\n    token\n  });\n}\n\nfunction* deleteProd(action) {\n  const {\n    id,\n    token\n  } = action.payload;\n  const data = yield call(productApi.deleteProducts, {\n    id,\n    token\n  });\n}\n\nfunction* getProds(action) {\n  const {\n    token\n  } = action.payload;\n  const data = yield call(productApi.getProducts, {\n    token\n  });\n  const arrProd = data.data.map(_ref => {\n    let {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount\n    } = _ref;\n    return {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount\n    };\n  });\n\n  if (data.status === 200) {\n    yield put({\n      type: SETPRODUCTS,\n      data: arrProd\n    });\n  }\n}\n\nfunction* getProd(action) {\n  const {\n    id,\n    token\n  } = action.payload;\n  const data = yield call(productApi.getProductWithId, {\n    id,\n    token\n  });\n}\n\nfunction* updateProd(action) {\n  const {\n    name,\n    manufacturer,\n    calories,\n    rating,\n    description,\n    category,\n    amount,\n    id,\n    token\n  } = action.payload;\n  const data = yield call(productApi.updateProduct, {\n    name,\n    manufacturer,\n    calories,\n    rating,\n    description,\n    category,\n    amount,\n    id,\n    token\n  });\n}\n/* Watcher */\n\n\nfunction* watchCreateProductSaga() {\n  yield takeLatest(CREATEPRODUCT, createProd);\n}\n\nfunction* watchDeleteProductSaga() {\n  yield takeLatest(DELETEPRODUCT, deleteProd);\n}\n\nfunction* watchGetProductsSaga() {\n  yield takeLatest(GETPRODUCTS, getProds);\n}\n\nfunction* watchGetProductWithIdSaga() {\n  yield takeLatest(GETPRODWITHID, getProd);\n}\n\nfunction* watchUpdateProductSaga() {\n  yield takeLatest(UPDATEPRODUCT, updateProd);\n}\n\nexport default function* productSaga() {\n  yield all([watchCreateProductSaga(), watchDeleteProductSaga(), watchGetProductsSaga(), watchGetProductWithIdSaga(), watchUpdateProductSaga()]);\n}","map":{"version":3,"sources":["/home/dev/Max/test/login/src/store/sagas/product.js"],"names":["takeLatest","put","call","all","CREATEPRODUCT","DELETEPRODUCT","GETPRODUCTS","GETPRODWITHID","SETPRODUCTS","UPDATEPRODUCT","productApi","createProd","action","name","manufacturer","calories","rating","description","category","amount","token","payload","data","createProduct","deleteProd","id","deleteProducts","getProds","getProducts","arrProd","map","status","type","getProd","getProductWithId","updateProd","updateProduct","watchCreateProductSaga","watchDeleteProductSaga","watchGetProductsSaga","watchGetProductWithIdSaga","watchUpdateProductSaga","productSaga"],"mappings":"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","sourcesContent":["import { takeLatest,put,call,all} from \"@redux-saga/core/effects\";\nimport { CREATEPRODUCT, DELETEPRODUCT, GETPRODUCTS, GETPRODWITHID, SETPRODUCTS, UPDATEPRODUCT } from \"../actionTypes/product\";\nimport { productApi } from \"../services/product\";\n\n\n/* Worker */\n\nfunction* createProd(action){\n  const {name,manufacturer,calories,rating,description,category,amount,token} = action.payload\n  const data = yield call(productApi.createProduct,{name,manufacturer,calories,rating,description,category,amount,token})\n}\n\n\nfunction* deleteProd(action){\n  const {id,token} = action.payload\n  const data = yield call(productApi.deleteProducts,{id,token})\n}\n\n\nfunction* getProds(action){\n  const {token} = action.payload\n  const data = yield call(productApi.getProducts,{token})\n   const arrProd = data.data.map(({name,manufacturer,calories,rating,description,category,amount})=>{\n    return{name,manufacturer,calories,rating,description,category,amount}\n  })\n  if(data.status === 200){\n    yield put({type:SETPRODUCTS,data:arrProd})\n  }\n}\n\nfunction* getProd(action){\n  const {id,token} =action.payload\n  const data = yield call(productApi.getProductWithId,{id,token})\n}\n\nfunction* updateProd(action){\n  const {name,manufacturer,calories,rating,description,category,amount,id,token} = action.payload\n  const data = yield call(productApi.updateProduct,{name,manufacturer,calories,rating,description,category,amount,id,token})\n}\n\n/* Watcher */\n\n\nfunction* watchCreateProductSaga(){\n  yield  takeLatest(CREATEPRODUCT,createProd)\n}\n\nfunction* watchDeleteProductSaga(){\n  yield takeLatest(DELETEPRODUCT,deleteProd)\n}\n\nfunction* watchGetProductsSaga(){\n  yield takeLatest(GETPRODUCTS,getProds)\n}\n\nfunction* watchGetProductWithIdSaga(){\n  yield takeLatest(GETPRODWITHID,getProd)\n}\n\nfunction* watchUpdateProductSaga(){\n  yield takeLatest(UPDATEPRODUCT,updateProd)\n}\n\nexport default function* productSaga(){\n  yield all([\n    watchCreateProductSaga(),\n    watchDeleteProductSaga(),\n    watchGetProductsSaga(),\n    watchGetProductWithIdSaga(),\n    watchUpdateProductSaga()\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}