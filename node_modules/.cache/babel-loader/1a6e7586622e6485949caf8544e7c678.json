{"ast":null,"code":"import * as axios from 'axios';\nimport { userApi } from './user';\nconst instanse = axios.create({\n  baseURL: 'https://mock-api-nodejs.herokuapp.com/',\n  withCredential: true\n});\ninstanse.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  config.headers.Authorization = `Bearer ${token}`;\n  config.headers['Access-Control-Allow-Origin'] = '*';\n  config.headers['Access-Control-Allow-Credential'] = true;\n  return config;\n});\ninstanse.interceptors.response.use(response => {\n  response.headers['Access-Control-Expose-Headers'] = 'Set-Cookie';\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (error.response.status === 401 && !originalRequest._retry && originalRequest.url != \"/refresh\") {\n    originalRequest._retry = true;\n    await userApi.renewToken();\n    return instanse(originalRequest);\n  }\n\n  return error;\n});\nexport default instanse;","map":{"version":3,"sources":["/home/dev/Max/test/login/src/store/services/index.js"],"names":["axios","userApi","instanse","create","baseURL","withCredential","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","originalRequest","status","_retry","url","renewToken"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAC,wCADoB;AAE5BC,EAAAA,cAAc,EAAC;AAFa,CAAb,CAAjB;AAKAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkCC,MAAM,IAAE;AACxC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAAgC,UAASJ,KAAM,EAA/C;AACAD,EAAAA,MAAM,CAACI,OAAP,CAAe,6BAAf,IAA+C,GAA/C;AACAJ,EAAAA,MAAM,CAACI,OAAP,CAAe,iCAAf,IAAkD,IAAlD;AACA,SAAOJ,MAAP;AACD,CAND;AAQAP,QAAQ,CAACI,YAAT,CAAsBS,QAAtB,CAA+BP,GAA/B,CAAoCO,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAACF,OAAT,CAAiB,+BAAjB,IAAkD,YAAlD;AACA,SAAOE,QAAP;AACD,CAHD,EAGG,gBAAgBC,KAAhB,EAAuB;AACxB,QAAMC,eAAe,GAAGD,KAAK,CAACP,MAA9B;;AACA,MAAIO,KAAK,CAACD,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAlD,IAA4DF,eAAe,CAACG,GAAhB,IAAuB,UAAvF,EAAmG;AACjGH,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACA,UAAMlB,OAAO,CAACoB,UAAR,EAAN;AACA,WAAOnB,QAAQ,CAACe,eAAD,CAAf;AACD;;AACD,SAAOD,KAAP;AACD,CAXD;AAYA,eAAed,QAAf","sourcesContent":["import * as axios from 'axios'\nimport { userApi } from './user'\n\nconst instanse = axios.create({\n  baseURL:'https://mock-api-nodejs.herokuapp.com/',\n  withCredential:true\n})\n\ninstanse.interceptors.request.use(config=>{\n  const token = localStorage.getItem('token')\n  config.headers.Authorization = `Bearer ${token}`\n  config.headers['Access-Control-Allow-Origin'] ='*'\n  config.headers['Access-Control-Allow-Credential']=true\n  return config\n})\n\ninstanse.interceptors.response.use((response) => {\n  response.headers['Access-Control-Expose-Headers']='Set-Cookie'\n  return response\n}, async function (error) {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry && originalRequest.url != \"/refresh\") {\n    originalRequest._retry = true;\n    await userApi.renewToken();            \n    return instanse(originalRequest);\n  }\n  return error;\n})\nexport default instanse"]},"metadata":{},"sourceType":"module"}