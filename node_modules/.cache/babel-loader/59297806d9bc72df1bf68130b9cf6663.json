{"ast":null,"code":"import { takeEvery, put } from 'redux-saga/effects';\nimport { userApi } from '../../../../API';\n\nasync function update(firstName, lastName, email, token) {\n  return await userApi.userUpdate(firstName, lastName, email, token);\n}\n\nfunction* workerSaga(_ref) {\n  let {\n    firstName,\n    lastName,\n    email,\n    token\n  } = _ref;\n  const data = yield update(firstName, lastName, email, token);\n\n  if (data.status === 200) {\n    yield put({\n      type: 'SET_DATA_USER',\n      data: {\n        firstName: data.data.updatedUser.firstName,\n        lastName: data.data.updatedUser.lastName,\n        email: data.data.updatedUser.email\n      }\n    });\n  }\n}\n\nexport default function* updateUserSaga() {\n  yield takeEvery('USERUPDATE', workerSaga);\n}","map":{"version":3,"sources":["/home/dev/Max/test/login/src/store/sagas/users/userUpdate/index.js"],"names":["takeEvery","put","userApi","update","firstName","lastName","email","token","userUpdate","workerSaga","data","status","type","updatedUser","updateUserSaga"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,GAAlB,QAA4B,oBAA5B;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,eAAeC,MAAf,CAAsBC,SAAtB,EAAgCC,QAAhC,EAAyCC,KAAzC,EAA+CC,KAA/C,EAAqD;AACnD,SAAO,MAAML,OAAO,CAACM,UAAR,CAAmBJ,SAAnB,EAA6BC,QAA7B,EAAsCC,KAAtC,EAA4CC,KAA5C,CAAb;AACD;;AAGD,UAAUE,UAAV,OAAsD;AAAA,MAAjC;AAACL,IAAAA,SAAD;AAAWC,IAAAA,QAAX;AAAoBC,IAAAA,KAApB;AAA0BC,IAAAA;AAA1B,GAAiC;AACpD,QAAMG,IAAI,GAAG,MAAMP,MAAM,CAACC,SAAD,EAAWC,QAAX,EAAoBC,KAApB,EAA0BC,KAA1B,CAAzB;;AACA,MAAGG,IAAI,CAACC,MAAL,KAAgB,GAAnB,EAAuB;AACrB,UAAMV,GAAG,CAAC;AAACW,MAAAA,IAAI,EAAC,eAAN;AAAsBF,MAAAA,IAAI,EAAC;AAACN,QAAAA,SAAS,EAACM,IAAI,CAACA,IAAL,CAAUG,WAAV,CAAsBT,SAAjC;AAA2CC,QAAAA,QAAQ,EAACK,IAAI,CAACA,IAAL,CAAUG,WAAV,CAAsBR,QAA1E;AAAmFC,QAAAA,KAAK,EAACI,IAAI,CAACA,IAAL,CAAUG,WAAV,CAAsBP;AAA/G;AAA3B,KAAD,CAAT;AACD;AACF;;AAED,eAAe,UAAUQ,cAAV,GAA0B;AACvC,QAAMd,SAAS,CAAC,YAAD,EAAcS,UAAd,CAAf;AACD","sourcesContent":["import {takeEvery,put} from 'redux-saga/effects'\nimport { userApi } from '../../../../API'\n\nasync function update(firstName,lastName,email,token){\n  return await userApi.userUpdate(firstName,lastName,email,token)\n}\n\n\nfunction* workerSaga({firstName,lastName,email,token}){\n  const data = yield update(firstName,lastName,email,token)\n  if(data.status === 200){\n    yield put({type:'SET_DATA_USER',data:{firstName:data.data.updatedUser.firstName,lastName:data.data.updatedUser.lastName,email:data.data.updatedUser.email}})\n  }\n}\n\nexport default function* updateUserSaga(){\n  yield takeEvery('USERUPDATE',workerSaga)\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}