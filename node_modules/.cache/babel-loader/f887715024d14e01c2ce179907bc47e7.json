{"ast":null,"code":"var _jsxFileName = \"/home/dev/Max/test/login/src/pages/signup/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport React from \"react\";\nimport Header from \"../../section/header\";\nimport { useStyles } from \"./style\";\nimport Input from './../../components/Input';\nimport { connect } from \"react-redux\";\nimport { userSignUp } from \"../../redux/auth\";\nimport { NavLink } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignUp = props => {\n  _s();\n\n  const s = useStyles();\n  const navigate = useNavigate();\n\n  const validateEmail = values => {\n    const errors = {};\n\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n\n    return errors;\n  };\n\n  const onSubmit = (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    props.userSignUp(values.firstName, values.lastName, values.email, values.password);\n    navigate('/');\n    setSubmitting(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.signUpForm,\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          firstName: '',\n          lastName: '',\n          email: '',\n          password: ''\n        },\n        validate: validateEmail,\n        onSubmit: onSubmit,\n        children: _ref2 => {\n          let {\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            onKeyPress: e => {\n              if (e.key === 'Enter') handleSubmit();\n            },\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              type: \"firstName\",\n              name: \"firstName\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.firstName,\n              errors: errors.firstName,\n              touched: touched.firstName,\n              placeholder: \"First name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"lastName\",\n              name: \"lastName\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.lastName,\n              errors: errors.lastName,\n              touched: touched.lastName,\n              placeholder: \"Last name\",\n              sx: {\n                marginTop: '20px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"email\",\n              name: \"email\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.email,\n              errors: errors.email,\n              touched: touched.email,\n              placeholder: \"Email\",\n              sx: {\n                marginTop: '20px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"password\",\n              name: \"password\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.password,\n              errors: errors.password,\n              touched: touched.password,\n              placeholder: \"Password\",\n              sx: {\n                marginTop: '20px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              sx: {\n                marginTop: '10px'\n              },\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignUp, \"WdIPXw8S3mIXYwYxSNY8dQJ+fVE=\", true, function () {\n  return [useStyles];\n});\n\n_c = SignUp;\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nexport default connect(mapStateToProps, {\n  userSignUp\n})(SignUp);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["/home/dev/Max/test/login/src/pages/signup/index.jsx"],"names":["Button","Formik","React","Header","useStyles","Input","connect","userSignUp","NavLink","SignUp","props","s","navigate","useNavigate","validateEmail","values","errors","email","test","onSubmit","setSubmitting","firstName","lastName","password","signUpForm","touched","handleChange","handleBlur","handleSubmit","isSubmitting","e","key","marginTop","mapStateToProps","state"],"mappings":"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","sourcesContent":["import {Button} from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport React from \"react\";\nimport Header from \"../../section/header\";\nimport { useStyles } from \"./style\";\nimport Input from './../../components/Input'\nimport { connect } from \"react-redux\";\nimport { userSignUp } from \"../../redux/auth\";\nimport { NavLink } from \"react-router-dom\";\n\n\n\nconst SignUp = (props)=>{\n\n  const s = useStyles()\n  const navigate = useNavigate()\n\n  const validateEmail = values => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  }\n\n  \n\n  const onSubmit = (values, { setSubmitting }) => {\n    props.userSignUp(values.firstName,values.lastName,values.email,values.password) \n    navigate('/')\n    setSubmitting(false)\n}\n  return(\n    <div>\n      <Header/>\n      <div className={s.signUpForm}>\n        <Formik\n          initialValues={{firstName:'',lastName:'',email: '', password: '' }}\n          validate={validateEmail}\n          onSubmit={onSubmit}\n        >\n        {({values,errors,\n          touched,handleChange,\n          handleBlur,handleSubmit,isSubmitting}) => (\n          <form \n          onSubmit={handleSubmit}\n          onKeyPress={e=>{if(e.key === 'Enter')handleSubmit()}}\n          >\n            <Input\n              type=\"firstName\"\n              name=\"firstName\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.firstName}\n              errors={errors.firstName}\n              touched={touched.firstName}\n              placeholder='First name'\n            />\n            <Input\n              type=\"lastName\"\n              name=\"lastName\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.lastName}\n              errors={errors.lastName}\n              touched={touched.lastName}\n              placeholder='Last name'\n              sx={{marginTop:'20px'}}\n              />\n            <Input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              errors={errors.email}\n              touched={touched.email}\n              placeholder='Email'\n              sx={{marginTop:'20px'}}\n            />\n            <Input\n              type=\"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              errors={errors.password}\n              touched={touched.password}\n              placeholder='Password'\n              sx={{marginTop:'20px'}}\n            />\n            <Button type=\"submit\" disabled={isSubmitting} sx={{marginTop:'10px'}} >\n              Submit\n            </Button>\n          </form>\n        )}\n        </Formik>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state)=>{\n  return{}\n}\n\nexport default connect(mapStateToProps,{userSignUp})(SignUp)  "]},"metadata":{},"sourceType":"module"}