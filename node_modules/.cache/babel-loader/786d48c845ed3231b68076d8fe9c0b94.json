{"ast":null,"code":"import { takeLatest, put, call, all } from \"@redux-saga/core/effects\";\nimport { setLoading } from \"../actions/status\";\nimport { setError } from \"../actions/status\";\nimport { CREATEPRODUCT, DELETEPRODUCT, GETPRODUCTS, GETPRODWITHID, SETPRODUCTS, UPDATEPRODUCT } from \"../actionTypes/product\";\nimport { productApi } from \"../services/product\";\n/* Worker */\n\nfunction* createProd(action) {\n  try {\n    yield put(setLoading(true));\n    const {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount\n    } = action.payload;\n    const data = yield call(productApi.createProduct, {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount\n    });\n  } catch (error) {\n    console.log(error);\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\nfunction* deleteProd(action) {\n  try {\n    yield put(setLoading(true));\n    const {\n      id\n    } = action.payload;\n    const data = yield call(productApi.deleteProducts, {\n      id\n    });\n  } catch (error) {\n    console.log(error);\n    yield put(setError(error));\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\nfunction* getProds(action) {\n  try {\n    yield put(setLoading(true));\n    const data = yield call(productApi.getProducts);\n    const arrProd = data.data.map(_ref => {\n      let {\n        name,\n        manufacturer,\n        calories,\n        rating,\n        description,\n        category,\n        amount\n      } = _ref;\n      return {\n        name,\n        manufacturer,\n        calories,\n        rating,\n        description,\n        category,\n        amount\n      };\n    });\n\n    if (data.status === 200) {\n      yield put({\n        type: SETPRODUCTS,\n        data: arrProd\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(setError(error));\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\nfunction* getProd(action) {\n  try {\n    yield put(setLoading(true));\n    const {\n      id\n    } = action.payload;\n    const data = yield call(productApi.getProductWithId, {\n      id\n    });\n  } catch (error) {\n    console.log(error);\n    yield put(setError(error));\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\nfunction* updateProd(action) {\n  try {\n    yield put(setLoading(true));\n    const data = yield call(productApi.updateProduct, { ...action.payload\n    });\n  } catch (error) {\n    console.log(error);\n    yield put(setError(error));\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n/* Watcher */\n\n\nfunction* watchCreateProductSaga() {\n  yield takeLatest(CREATEPRODUCT, createProd);\n}\n\nfunction* watchDeleteProductSaga() {\n  yield takeLatest(DELETEPRODUCT, deleteProd);\n}\n\nfunction* watchGetProductsSaga() {\n  yield takeLatest(GETPRODUCTS, getProds);\n}\n\nfunction* watchGetProductWithIdSaga() {\n  yield takeLatest(GETPRODWITHID, getProd);\n}\n\nfunction* watchUpdateProductSaga() {\n  yield takeLatest(UPDATEPRODUCT, updateProd);\n}\n\nexport default function* productSaga() {\n  yield all([watchCreateProductSaga(), watchDeleteProductSaga(), watchGetProductsSaga(), watchGetProductWithIdSaga(), watchUpdateProductSaga()]);\n}","map":{"version":3,"sources":["/home/dev/Max/test/login/src/store/sagas/product.js"],"names":["takeLatest","put","call","all","setLoading","setError","CREATEPRODUCT","DELETEPRODUCT","GETPRODUCTS","GETPRODWITHID","SETPRODUCTS","UPDATEPRODUCT","productApi","createProd","action","name","manufacturer","calories","rating","description","category","amount","payload","data","createProduct","error","console","log","deleteProd","id","deleteProducts","getProds","getProducts","arrProd","map","status","type","getProd","getProductWithId","updateProd","updateProduct","watchCreateProductSaga","watchDeleteProductSaga","watchGetProductsSaga","watchGetProductWithIdSaga","watchUpdateProductSaga","productSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, all } from \"@redux-saga/core/effects\";\nimport { setLoading } from \"../actions/status\";\nimport { setError } from \"../actions/status\";\nimport {\n  CREATEPRODUCT,\n  DELETEPRODUCT,\n  GETPRODUCTS,\n  GETPRODWITHID,\n  SETPRODUCTS,\n  UPDATEPRODUCT,\n} from \"../actionTypes/product\";\nimport { productApi } from \"../services/product\";\n\n/* Worker */\n\nfunction* createProd(action) {\n  try {\n    yield put(setLoading(true));\n    const {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount,\n    } = action.payload;\n    const data = yield call(productApi.createProduct, {\n      name,\n      manufacturer,\n      calories,\n      rating,\n      description,\n      category,\n      amount,\n    });\n  } catch (error) {\n    console.log(error);\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\nfunction* deleteProd(action) {\n  try {\n    yield put(setLoading(true));\n    const { id } = action.payload;\n    const data = yield call(productApi.deleteProducts, { id });\n  } catch (error) {\n    console.log(error);\n    yield put(setError(error))\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\nfunction* getProds(action) {\n  try {\n    yield put(setLoading(true));\n    const data = yield call(productApi.getProducts);\n    const arrProd = data.data.map(\n      ({\n        name,\n        manufacturer,\n        calories,\n        rating,\n        description,\n        category,\n        amount,\n      }) => {\n        return {\n          name,\n          manufacturer,\n          calories,\n          rating,\n          description,\n          category,\n          amount,\n        };\n      }\n    );\n    if (data.status === 200) {\n      yield put({ type: SETPRODUCTS, data: arrProd });\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(setError(error))\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\nfunction* getProd(action) {\n  try {\n    yield put(setLoading(true));\n    const { id } = action.payload;\n    const data = yield call(productApi.getProductWithId, { id });\n  } catch (error) {\n    console.log(error);\n    yield put(setError(error))\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\nfunction* updateProd(action) {\n  try {\n    yield put(setLoading(true));\n    const data = yield call(productApi.updateProduct, {...action.payload});\n  } catch (error) {\n    console.log(error);\n    yield put(setError(error))\n  } finally {\n    yield put(setLoading(false));\n  }\n}\n\n/* Watcher */\n\nfunction* watchCreateProductSaga() {\n  yield takeLatest(CREATEPRODUCT, createProd);\n}\n\nfunction* watchDeleteProductSaga() {\n  yield takeLatest(DELETEPRODUCT, deleteProd);\n}\n\nfunction* watchGetProductsSaga() {\n  yield takeLatest(GETPRODUCTS, getProds);\n}\n\nfunction* watchGetProductWithIdSaga() {\n  yield takeLatest(GETPRODWITHID, getProd);\n}\n\nfunction* watchUpdateProductSaga() {\n  yield takeLatest(UPDATEPRODUCT, updateProd);\n}\n\nexport default function* productSaga() {\n  yield all([\n    watchCreateProductSaga(),\n    watchDeleteProductSaga(),\n    watchGetProductsSaga(),\n    watchGetProductWithIdSaga(),\n    watchUpdateProductSaga(),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}